AWSTemplateFormatVersion: 2010-09-09
Description: This CloudFormation template creates Lambda function to URLs

Resources:
  PermissionForURLInvoke:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref LambdaFunction
      FunctionUrlAuthType: "NONE"
      Action: lambda:InvokeFunctionUrl
      Principal: "*"
  LambdaFunctionURL:
    Type: AWS::Lambda::Url
    DependsOn: LambdaFunction
    Properties:
      AuthType: NONE
      TargetFunctionArn: !GetAtt LambdaFunction.Arn
  LambdaFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: "/"
      Policies:
        - PolicyName: LambdaFunctionPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                  - s3:*
                Resource: "*"
  LambdaFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    DependsOn: LambdaFunction
    Properties:
      RetentionInDays: 1
      LogGroupName: !Join
        - ""
        - - "/aws/lambda/"
          - !Ref LambdaFunction
  LambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      Runtime: python3.9
      Timeout: 500
      Handler: index.lambda_handler
      Role: !GetAtt LambdaFunctionRole.Arn
      Description: Lambda function return videos URLs from S3 Bucket
      Code:
        ZipFile: !Sub
          - |-
            import boto3
            import socket

            bucket_2 = "ahmedamsoliman-replica"

            s3 = boto3.client("s3")
            print(s3)

            def get_all_s3_objects(s3, **base_kwargs):
                continuation_token = None
                while True:
                    list_kwargs = dict(MaxKeys=1000, **base_kwargs)
                    if continuation_token:
                        list_kwargs["ContinuationToken"] = continuation_token
                    response = s3.list_objects_v2(**list_kwargs)
                    yield from response.get("Contents", [])
                    if not response.get("IsTruncated"):  # At the end of the list?
                        break
                    continuation_token = response.get("NextContinuationToken")

            def lambda_handler(event, context):
                fixed = "https://s3.amazonaws.com/ahmedamsoliman-replica/"

                _video = []

                for file in get_all_s3_objects(s3, Bucket=bucket_2, Prefix=f"IAM"):
                    if "mp4" in file["Key"]:
                        _video.append(fixed + file["Key"])

                years = {"video": _video}
                return years

          - lambda_function_role_arn: !Ref LambdaFunctionRole
Outputs:
  LambdaFunctionName:
    Value: !Ref LambdaFunction
