<%- include ('../partials/header') %>

    <h1>Calculator</h1>
    <link href="../../stylesheets/calculator.css" rel="stylesheet">
</head>
<body>
    <div class="calculator-grid">
        <div class="output">
            <div data-previous-operand class="previous-operand"></div>
            <div data-current-operand class="current-operand"></div>
        </div>

        <button data-all-clear class="span-two">AC</button>
        <button data-delete>DEL</button>
        <button data-operation>รท</button>
        <button data-number>1</button>
        <button data-number>2</button>
        <button data-number>3</button>
        <button data-operation>*</button>
        <button data-number>4</button>
        <button data-number>5</button>
        <button data-number>6</button>
        <button data-operation>+</button>
        <button data-number>7</button>
        <button data-number>8</button>
        <button data-number>9</button>
        <button data-operation>-</button>
        <button data-number>.</button>
        <button data-number>0</button>
        <button data-equals class="span-two">=</button>
    </div>



    <script>
        class Calculater
        {
            constructor(previousOperandTextElement, currentOperandTextElement)
            {
                this.previousOperandTextElement = previousOperandTextElement
                this.currentOperandTextElement = currentOperandTextElement
            
                this.clear()
            }
        
            clear()
            {
                this.currentOperand = ''
                this.previousOperand = ''
                this.operation = undefined
            }
        
            delete()
            {
                this.currentOperand = this.currentOperand.toString().slice(0, -1)
            }
        
            appendNumber(number)
            {
                if (number === '.' && this.currentOperand.includes('.')) return
                this.currentOperand = this.currentOperand.toString() + number.toString()
            }
        
            chooseOperation(operation)
            {
                if (this.currentOperand === '') return
                if (this.previousOperand !== '') 
                {
                    this.compute()
                }
                this.operation = operation
                this.previousOperand = this.currentOperand
                this.currentOperand = ''
            }
        
            compute()
            {
                let computation
                const prev = parseFloat(this.previousOperand)
                const current = parseFloat(this.currentOperand)
                if (isNaN(prev) || isNaN(current)) return
                switch (this.operation)
                {
                    case '+': 
                        computation = prev + current
                        break
                    case '-': 
                        computation = prev - current
                        break
                    case '*': 
                        computation = prev * current
                        break
                    case 'รท': 
                        computation = prev / current
                        break
                    default:
                        return
                }
                this.currentOperand = computation
                this.operation = undefined
                this.previousOperand = ''
            }
        
            getDisplayNumber(number) 
            {
                const stringNumber = number.toString()
                const integerDigits = parseFloat(stringNumber.split('.')[0])
                const decimalDigits = stringNumber.split('.')[1]
                let integerDisplay
                if (isNaN(integerDigits)) 
                {
                    integerDisplay = ''
                } 
                else 
                {
                    integerDisplay = integerDigits.toLocaleString('en', { maximumFractionDigits: 0 })
                }
                if (decimalDigits != null) 
                {
                    return `${integerDisplay}.${decimalDigits}`
                } 
                else 
                {
                    return integerDisplay
                }
              }
          
            updateDispla()
            {
                this.currentOperandTextElement.innerText = this.getDisplayNumber(this.currentOperand)
                if(this.operation != null)
                {
                    this.previousOperandTextElement.innerText = `${this.getDisplayNumber(this.previousOperand)} ${this.operation}`
                }
                else
                {
                    this.previousOperandTextElement.innerText = ''
                }
            }
        }
        
        
        const numberButtons = document.querySelectorAll('[data-number]');
        const operationButtons = document.querySelectorAll('[data-operation]');
        const equalButtons = document.querySelector('[data-equals]');
        const deleteButtons = document.querySelector('[data-delete]');
        const allClearButtons = document.querySelector('[data-all-clear]');
        const previousOperandTextElement = document.querySelector('[data-previous-operand]');
        const currentOperandTextElement = document.querySelector('[data-current-operand]');
        
        
        const calculater = new Calculater(previousOperandTextElement, currentOperandTextElement)
        
        numberButtons.forEach(button => 
            {
                button.addEventListener('click', () =>
                {
                    calculater.appendNumber(button.innerText)
                    calculater.updateDispla()
                })
            })
            
            
        operationButtons.forEach(button => 
        {
            button.addEventListener('click', () =>
            {
                calculater.chooseOperation(button.innerText)
                calculater.updateDispla()
            })
        })
        
        equalButtons.addEventListener('click', button => 
        {
            calculater.compute()
            calculater.updateDispla()
        })
        
        allClearButtons.addEventListener('click', button => 
        {
            calculater.clear()
            calculater.updateDispla()
        })
        
        deleteButtons.addEventListener('click', button => 
        {
            calculater.delete()
            calculater.updateDispla()
        })
    </script>
</body>
</html>